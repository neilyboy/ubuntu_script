#!/bin/bash
# ----------------------------------------------------------------------
# uploadem - File uploader for Gofile and BuzzHeavier
# ----------------------------------------------------------------------
# Created: $(date +"%Y-%m-%d")
# Author: Cascade AI Assistant
# ----------------------------------------------------------------------
# Description:
#   This script uploads files to both Gofile and BuzzHeavier (Eastern US)
#   and outputs clean links.
#
# Usage:
#   uploadem <file1> [file2 ...] or uploadem *.extension
#   uploadem -r <file1> [file2 ...] - Use random filenames when uploading
# ----------------------------------------------------------------------

# Ensure safe handling of filenames with spaces/special chars
IFS=$'\n\t'
set -f  # Disable globbing

# Eastern US server ID for BuzzHeavier
BUZZHEAVIER_LOCATION_ID="12brteedoy0f"

# Check for dependencies
for cmd in curl jq bc; do
    if ! command -v "$cmd" >/dev/null 2>&1; then
        echo "ERROR: $cmd is required. Please install it." >&2
        exit 1
    fi
done

# Function to format file size
format_size() {
    local size=$1
    if [ "$size" -ge 1073741824 ]; then
        echo "$(echo "scale=2; $size/1073741824" | bc)GB"
    elif [ "$size" -ge 1048576 ]; then
        echo "$(echo "scale=2; $size/1048576" | bc)MB"
    elif [ "$size" -ge 1024 ]; then
        echo "$(echo "scale=2; $size/1024" | bc)KB"
    else
        echo "${size}B"
    fi
}

# Function to display progress
display_progress() {
    local service=$1
    local temp_log=$2
    local file_size=$3      # File size in bytes
    local formatted_size=$4 # Formatted file size
    local start_time=$(date +%s.%N)
    local last_update_time=$start_time
    local displayed_once=false
    local min_display_time=1.5  # Minimum display time in seconds
    local transferred_bytes=0
    local last_bytes=0
    local counter=0
    
    # Process is running in background, display progress until it completes
    echo -ne "Uploading to $service [0.00KB/s - 0B/$formatted_size - 0%]     "
    
    while [ -f "$temp_log.progress" ]; do
        # Check if log file exists and read it
        if [ -f "$temp_log" ]; then
            # Get progress from curl output
            # Different approach to parse curl output more reliably
            local curl_output=$(cat "$temp_log")
            
            # First try to get progress percentage
            local progress_percent=$(echo "$curl_output" | grep -o '[0-9]\+\.[0-9]\+%' | tail -n 1 | sed 's/%//')
            if [ -z "$progress_percent" ]; then
                progress_percent=$(echo "$curl_output" | grep -o '[0-9]\+%' | tail -n 1 | sed 's/%//')
            fi
            
            # Calculate bytes transferred based on file size and percentage
            if [ -n "$progress_percent" ] && [ -n "$file_size" ]; then
                transferred_bytes=$(echo "scale=0; $file_size * $progress_percent / 100" | bc)
                local progress_int=$(echo "$progress_percent / 1" | bc)
                
                # Calculate speed based on bytes transferred since last update
                local current_time=$(date +%s.%N)
                local time_diff=$(echo "$current_time - $last_update_time" | bc)
                
                # Only calculate speed if enough time has passed (avoid division by near-zero)
                if [ "$(echo "$time_diff > 0.5" | bc)" -eq 1 ]; then
                    local bytes_diff=$(echo "$transferred_bytes - $last_bytes" | bc)
                    local speed_bps=$(echo "scale=2; $bytes_diff / $time_diff" | bc)
                    local speed_str=$(format_speed "$speed_bps")
                    
                    # Format transferred size
                    local transferred_str=$(format_size "$transferred_bytes")
                    
                    # Update the display
                    echo -ne "\rUploading to $service [$speed_str - $transferred_str/$formatted_size - ${progress_int}%]     "
                    
                    # Update tracking variables
                    last_bytes=$transferred_bytes
                    last_update_time=$current_time
                    displayed_once=true
                fi
            # If we can't get progress, but have a log file, show something
            elif [ ! "$displayed_once" = true ] || [ "$((counter % 10))" -eq 0 ]; then
                # Calculate time elapsed
                local current_time=$(date +%s.%N)
                local elapsed=$(echo "$current_time - $start_time" | bc)
                elapsed_int=$(echo "$elapsed / 1" | bc)
                
                # Check if we can read the log file size
                local log_size=$(stat -c %s "$temp_log" 2>/dev/null || echo "0")
                
                # If log file has content, we're making progress
                if [ "$log_size" -gt 10 ]; then
                    # Update with time-based status
                    echo -ne "\rUploading to $service [Active - ${elapsed_int}s elapsed - Uploading]     "
                else
                    # Show minimal status
                    echo -ne "\rUploading to $service [Starting - Connecting...]     "
                fi
            fi
        fi
        
        counter=$((counter + 1))
        sleep 0.2
    done
    
    # Ensure minimum display time for small files
    local end_time=$(date +%s.%N)
    local total_time=$(echo "$end_time - $start_time" | bc)
    if [ "$(echo "$total_time < $min_display_time" | bc)" -eq 1 ]; then
        local remaining=$(echo "$min_display_time - $total_time" | bc)
        sleep "$remaining"
    fi
    
    echo -e "\rUploading to $service [Complete]                                     "
}

# Function to format speed
format_speed() {
    local bytes_per_sec=$1
    if [ "$(echo "$bytes_per_sec >= 1073741824" | bc)" -eq 1 ]; then
        echo "$(echo "scale=2; $bytes_per_sec/1073741824" | bc)GB/s"
    elif [ "$(echo "$bytes_per_sec >= 1048576" | bc)" -eq 1 ]; then
        echo "$(echo "scale=2; $bytes_per_sec/1048576" | bc)MB/s"
    else
        echo "$(echo "scale=2; $bytes_per_sec/1024" | bc)KB/s"
    fi
}

# Parse arguments
USE_RANDOM_FILENAME=false

# Check for flags
while getopts ":r" opt; do
    case $opt in
        r)
            USE_RANDOM_FILENAME=true
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            echo "Usage: uploadem <file1> [file2 ...] or uploadem *.extension"
            echo "       uploadem -r <file1> [file2 ...] - Use random filenames when uploading"
            exit 1
            ;;
    esac
done

# Shift to the actual file arguments
shift $((OPTIND - 1))

# Check for arguments
if [ $# -eq 0 ]; then
    echo "Usage: uploadem <file1> [file2 ...] or uploadem *.extension"
    echo "       uploadem -r <file1> [file2 ...] - Use random filenames when uploading"
    exit 1
fi

# Initialize variable to store all results
ALL_RESULTS=""

# Process each file
for input_file in "$@"; do
    if [ ! -f "$input_file" ]; then
        echo "WARNING: File not found: $input_file" >&2
        continue
    fi

    # Get filename and extension
    filename=$(basename "$input_file")
    filename_noext="${filename%.*}"
    ext="${filename##*.}"
    
    echo
    echo "==== Processing: $filename ===="
    echo

    # Determine which file to use for upload
    if [ "$USE_RANDOM_FILENAME" = true ]; then
        # Create a temporary file with a random name to avoid issues with special characters
        temp_file="upload-$$.${ext}"
        cp -- "$input_file" "$temp_file"
        upload_file="$temp_file"
        echo "Using random filename for upload: $(basename "$temp_file")" >&2
    else
        # Use the original file directly
        upload_file="$input_file"
        temp_file=""  # No temp file created
    fi
    
    # --- GOFILE UPLOAD ---
    
    # Create anonymous Gofile session
    gofile_account_json=$(curl -s -X POST "https://api.gofile.io/accounts")
    gofile_token=$(echo "$gofile_account_json" | jq -r '.data.token')
    gofile_root_folder=$(echo "$gofile_account_json" | jq -r '.data.rootFolder')
    
    # Get best server
    gofile_servers_json=$(curl -s "https://api.gofile.io/servers")
    gofile_server=$(echo "$gofile_servers_json" | jq -r '.data.servers[0].name')
    
    # Create folder
    gofile_folder_json=$(curl -s -X POST -H "Authorization: Bearer $gofile_token" \
                         -H "Referer: https://gofile.io/" \
                         -H "Content-Type: application/json" \
                         -d '{"parentFolderId":"'"$gofile_root_folder"'"}' \
                         "https://api.gofile.io/contents/createfolder")
    gofile_folder_id=$(echo "$gofile_folder_json" | jq -r '.data.id')
    
    # Set folder to public
    curl -s -X PUT -H "Authorization: Bearer $gofile_token" \
         -H "Referer: https://gofile.io/" \
         -H "Content-Type: application/json" \
         -d '{"attribute":"public","attributeValue":"true"}' \
         "https://api.gofile.io/contents/$gofile_folder_id/update" > /dev/null
    
    # Create temp files for progress tracking
    gofile_progress_log=$(mktemp -p /tmp uploadem-gofile-XXXXXX.log)
    touch "${gofile_progress_log}.progress"
    
    # Get file size in bytes
    file_size=$(stat -c %s "$upload_file")
    formatted_size=$(format_size "$file_size")
    
    # Upload file with progress
    gofile_upload_url="https://$gofile_server.gofile.io/contents/uploadFile"
    (
        # Use stdbuf to ensure output is not buffered
        curl --no-buffer -# -X POST -H "Authorization: Bearer $gofile_token" \
             -H "Referer: https://gofile.io/" \
             -F "file=@$upload_file" \
             -F "folderId=$gofile_folder_id" \
             "$gofile_upload_url" 2> "$gofile_progress_log" | tee "${gofile_progress_log}.json" > /dev/null
        rm -f "${gofile_progress_log}.progress"
    ) &
    
    # Display progress
    display_progress "Gofile" "$gofile_progress_log" "$file_size" "$formatted_size" >&2
    
    # Wait for upload to complete and process response
    wait
    gofile_upload_json=$(cat "${gofile_progress_log}.json")
    gofile_status=$(echo "$gofile_upload_json" | jq -r '.status')
    
    if [ "$gofile_status" != "ok" ]; then
        gofile_link="[GOFILE UPLOAD FAILED]"
    else
        gofile_link=$(echo "$gofile_upload_json" | jq -r '.data.downloadPage')
    fi
    
    # Clean up temp files
    rm -f "$gofile_progress_log" "${gofile_progress_log}.json"
    
    # --- BUZZHEAVIER UPLOAD ---
    
    # Create temp files for progress tracking
    buzz_progress_log=$(mktemp -p /tmp uploadem-buzz-XXXXXX.log)
    touch "${buzz_progress_log}.progress"
    
    # Upload to BuzzHeavier with progress
    buzz_url="https://w.buzzheavier.com/$(basename "$upload_file")?locationId=$BUZZHEAVIER_LOCATION_ID"
    (
        # Use stdbuf to ensure output is not buffered
        curl --no-buffer -# -T "$upload_file" "$buzz_url" 2> "$buzz_progress_log" | tee "${buzz_progress_log}.json" > /dev/null
        rm -f "${buzz_progress_log}.progress"
    ) &
    
    # Display progress
    display_progress "BuzzHeavier" "$buzz_progress_log" "$file_size" "$formatted_size" >&2
    
    # Wait for upload to complete and process response
    wait
    buzz_response=$(cat "${buzz_progress_log}.json")
    
    if echo "$buzz_response" | grep -qi 'error\|denied\|fail'; then
        buzz_link="[BUZZHEAVIER UPLOAD FAILED]"
    elif echo "$buzz_response" | grep -q '"id"'; then
        buzz_id=$(echo "$buzz_response" | jq -r '.data.id')
        if [ "$buzz_id" != "null" ] && [ -n "$buzz_id" ]; then
            buzz_link="https://buzzheavier.com/$buzz_id"
        else
            buzz_link="[BUZZHEAVIER UNKNOWN RESPONSE]"
        fi
    else
        buzz_link="[BUZZHEAVIER UNKNOWN RESPONSE]"
    fi
    
    # Clean up temp files
    rm -f "$buzz_progress_log" "${buzz_progress_log}.json"
    
    # Clean up temp file if one was created
    if [ -n "$temp_file" ] && [ -f "$temp_file" ]; then
        rm -f "$temp_file"
    fi
    
    # Store the results instead of outputting immediately
    RESULT="$filename_noext\n$gofile_link\n$buzz_link\n"
    ALL_RESULTS="${ALL_RESULTS}${RESULT}\n"
done

# Output all results at the end for easy copying
echo -e "\n\n"
echo -e "$ALL_RESULTS"

exit 0
